diff --git a/node_modules/svelvet/Containers/GraphView/index.svelte b/node_modules/svelvet/Containers/GraphView/index.svelte
index 328a419..1e0bdb2 100644
--- a/node_modules/svelvet/Containers/GraphView/index.svelte
+++ b/node_modules/svelvet/Containers/GraphView/index.svelte
@@ -22,45 +22,11 @@ export let derivedEdges;
 export let key;
 // here we lookup the store using the unique key
 const svelvetStore = findOrCreateStore(key);
-const { nodeSelected, backgroundStore, widthStore, heightStore, d3Scale } = svelvetStore;
+const { nodeSelected, backgroundStore, movementStore, widthStore, heightStore, d3Scale } = svelvetStore;
 // declaring the grid and dot size for d3's transformations and zoom
 const gridSize = 15;
 const dotSize = 10;
-onMount(() => {
-    d3.select(`.Edges-${key}`).call(d3Zoom);
-    d3.select(`.Nodes-${key}`).call(d3Zoom);
-});
-// TODO: Update d3Zoom type (refer to d3Zoom docs)
-let d3Zoom = d3
-    .zoom()
-    .filter(() => !$nodeSelected)
-    .scaleExtent([0.4, 2])
-    .on('zoom', handleZoom);
-// function to handle zoom events - arguments: d3ZoomEvent
-function handleZoom(e) {
-    //add a store that contains the current value of the d3-zoom's scale to be used in onMouseMove function
-    d3Scale.set(e.transform.k);
-    // should not run d3.select below if backgroundStore is false
-    if ($backgroundStore) {
-        d3.select(`#background-${key}`)
-            .attr('x', e.transform.x)
-            .attr('y', e.transform.y)
-            .attr('width', gridSize * e.transform.k)
-            .attr('height', gridSize * e.transform.k)
-            .selectAll('#dot')
-            .attr('x', (gridSize * e.transform.k) / 2 - dotSize / 2)
-            .attr('y', (gridSize * e.transform.k) / 2 - dotSize / 2)
-            .attr('opacity', Math.min(e.transform.k, 1));
-    }
-    // transform 'g' SVG elements (edge, edge text, edge anchor)
-    d3.select(`.Edges-${key} g`).attr('transform', e.transform);
-    // transform div elements (nodes)
-    let transform = d3.zoomTransform(this);
-    // selects and transforms all node divs from class 'Node' and performs transformation
-    d3.select(`.Node-${key}`)
-        .style('transform', 'translate(' + transform.x + 'px,' + transform.y + 'px) scale(' + transform.k + ')')
-        .style('transform-origin', '0 0');
-}
+
 </script>
 
 <!-- This is the container that holds GraphView and we have disabled right click functionality to prevent a sticking behavior -->
diff --git a/node_modules/svelvet/Containers/Svelvet/index.svelte b/node_modules/svelvet/Containers/Svelvet/index.svelte
index a6e029e..aa01459 100644
--- a/node_modules/svelvet/Containers/Svelvet/index.svelte
+++ b/node_modules/svelvet/Containers/Svelvet/index.svelte
@@ -8,6 +8,7 @@ export let edges;
 export let width = 600;
 export let height = 600;
 export let background = false;
+export let movement = true;
 // generates a unique string for each svelvet component's unique store instance
 const key = (Math.random() + 1).toString(36).substring(7);
 // creates a store that uses the unique sting as the key to create and look up the corresponding store
@@ -22,6 +23,7 @@ onMount(() => {
     svelvetStore.widthStore.set(width);
     svelvetStore.heightStore.set(height);
     svelvetStore.backgroundStore.set(background);
+    svelvetStore.movementStore.set(movement);
 });
 // enables data reactivity
 afterUpdate(() => {
@@ -30,6 +32,7 @@ afterUpdate(() => {
     svelvetStore.widthStore.set(width);
     svelvetStore.heightStore.set(height);
     svelvetStore.backgroundStore.set(background);
+    svelvetStore.movementStore.set(movement);
 });
 </script>
 
diff --git a/node_modules/svelvet/Containers/Svelvet/index.svelte.d.ts b/node_modules/svelvet/Containers/Svelvet/index.svelte.d.ts
index 5e01ad9..6e8e8f0 100644
--- a/node_modules/svelvet/Containers/Svelvet/index.svelte.d.ts
+++ b/node_modules/svelvet/Containers/Svelvet/index.svelte.d.ts
@@ -7,6 +7,7 @@ declare const __propDef: {
         width?: number | undefined;
         height?: number | undefined;
         background?: boolean | undefined;
+        movement?: boolean | undefined;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/node_modules/svelvet/Nodes/ImageNode.svelte b/node_modules/svelvet/Nodes/ImageNode.svelte
index c3821b7..b26d1f9 100644
--- a/node_modules/svelvet/Nodes/ImageNode.svelte
+++ b/node_modules/svelvet/Nodes/ImageNode.svelte
@@ -1,7 +1,7 @@
 <script>import { findOrCreateStore } from '../stores/store';
 export let node;
 export let key;
-const { onMouseMove, onNodeClick, onTouchMove, nodeSelected, nodeIdSelected } = findOrCreateStore(key);
+const { onMouseMove, onNodeClick, nodeSelected, nodeIdSelected } = findOrCreateStore(key);
 // $nodeSelected is a store boolean that lets GraphView component know if ANY node is selected
 // moving local boolean specific to node selected, to change position of individual node once selected
 let moving = false;
@@ -20,34 +20,7 @@ let moved = false;
 />
 
 <img
-  on:touchmove={(e) => {
-    if (moving) {
-      onTouchMove(e, node.id);
-    }
-  }}
-  on:touchstart={(e) => {
-    e.preventDefault();
-    moving = true;
-    $nodeSelected = true;
-  }}
-  on:touchend={(e) => {
-    moving = false;
-    $nodeSelected = false;
-  }}
-  on:mousedown={(e) => {
-    e.preventDefault();
-    moving = true;
-    $nodeIdSelected = node.id;
-    $nodeSelected = true;
-  }}
-  on:mouseup={(e) => {
-    moving = false;
-    $nodeSelected = false;
-    if (!moved && node.id == $nodeIdSelected) {
-      onNodeClick(e, node.id);
-    }
-    moved = false;
-  }}
+  
   class="Node"
   style="left: {node.position.x}px; 
       top: {node.position.y}px; 
diff --git a/node_modules/svelvet/Nodes/index.svelte b/node_modules/svelvet/Nodes/index.svelte
index 0bc4156..46949d5 100644
--- a/node_modules/svelvet/Nodes/index.svelte
+++ b/node_modules/svelvet/Nodes/index.svelte
@@ -1,7 +1,15 @@
 <script>import { findOrCreateStore } from '../stores/store';
 export let node;
 export let key;
-const { onMouseMove, onNodeClick, onTouchMove, nodeSelected, nodeIdSelected } = findOrCreateStore(key);
+const {
+    onMouseMove,
+    onNodeClick,
+    nodeSelected,
+    nodeIdSelected,
+    movementStore
+    } = findOrCreateStore(key);
+
+  $: shouldMove = moving && $movementStore;
 // $nodeSelected is a store boolean that lets GraphView component know if ANY node is selected
 // moving local boolean specific to node selected, to change position of individual node once selected
 let moving = false;
@@ -11,7 +19,7 @@ let moved = false;
 <svelte:window
   on:mousemove={(e) => {
     e.preventDefault();
-    if (moving) {
+    if (shouldMove) {
       onMouseMove(e, node.id);
       moved = true;
     }
@@ -19,34 +27,6 @@ let moved = false;
 />
 
 <div
-  on:touchmove={(e) => {
-    if (moving) {
-      onTouchMove(e, node.id);
-    }
-  }}
-  on:touchstart={(e) => {
-    e.preventDefault();
-    moving = true;
-    $nodeSelected = true;
-  }}
-  on:touchend={(e) => {
-    moving = false;
-    $nodeSelected = false;
-  }}
-  on:mousedown={(e) => {
-    e.preventDefault();
-    moving = true;
-    $nodeIdSelected = node.id;
-    $nodeSelected = true;
-  }}
-  on:mouseup={(e) => {
-    moving = false;
-    $nodeSelected = false;
-    if (!moved && node.id == $nodeIdSelected) {
-      onNodeClick(e, node.id);
-    }
-    moved = false;
-  }}
   class="Node"
   style="left: {node.position.x}px; 
     top: {node.position.y}px; 
@@ -76,7 +56,7 @@ let moved = false;
     position: absolute;
     display: grid;
     user-select: none;
-    cursor: move;
+    cursor: default;
     justify-content: center;
     overscroll-behavior: auto;
     align-items: center;
diff --git a/node_modules/svelvet/stores/store.d.ts b/node_modules/svelvet/stores/store.d.ts
index bd76794..7df3cad 100644
--- a/node_modules/svelvet/stores/store.d.ts
+++ b/node_modules/svelvet/stores/store.d.ts
@@ -6,6 +6,7 @@ interface CoreSvelvetStore {
     widthStore: Writable<number>;
     heightStore: Writable<number>;
     backgroundStore: Writable<boolean>;
+    movementStore: Writable<boolean>;
     nodeIdSelected: Writable<number>;
     nodeSelected: Writable<boolean>;
     d3Scale: Writable<number>;
@@ -13,7 +14,6 @@ interface CoreSvelvetStore {
 interface SvelvetStore extends CoreSvelvetStore {
     onMouseMove: (e: any, nodeID: number) => void;
     onNodeClick: (e: any, nodeID: number) => void;
-    onTouchMove: (e: any, nodeID: number) => void;
     derivedEdges: Readable<Edge[]>;
 }
 export declare function findOrCreateStore(key: string): SvelvetStore;
diff --git a/node_modules/svelvet/stores/store.js b/node_modules/svelvet/stores/store.js
index 54c2ca7..c90b2da 100644
--- a/node_modules/svelvet/stores/store.js
+++ b/node_modules/svelvet/stores/store.js
@@ -14,6 +14,7 @@ export function findOrCreateStore(key) {
         widthStore: writable(600),
         heightStore: writable(600),
         backgroundStore: writable(false),
+        movementStore: writable(true),
         nodeSelected: writable(false),
         nodeIdSelected: writable(-1),
         d3Scale: writable(1)
@@ -34,22 +35,7 @@ export function findOrCreateStore(key) {
         });
     };
     // This is the function handler for the touch event on mobile to select a node.
-    const onTouchMove = (e, nodeID) => {
-        coreSvelvetStore.nodesStore.update((n) => {
-            n.forEach((node) => {
-                if (node.id === nodeID) {
-                    //calculates the location of the selected node
-                    const { x, y, width, height } = e.target.getBoundingClientRect();
-                    const offsetX = ((e.touches[0].clientX - x) / width) * e.target.offsetWidth;
-                    const offsetY = ((e.touches[0].clientY - y) / height) * e.target.offsetHeight;
-                    // centers the node consistently under the user's touch
-                    node.position.x += offsetX - node.width / 2;
-                    node.position.y += offsetY - node.height / 2;
-                }
-            });
-            return [...n];
-        });
-    };
+
     const nodeIdSelected = coreSvelvetStore.nodeIdSelected;
     // if the user clicks a node without moving it, this function fires allowing a user to invoke the callback function
     const onNodeClick = (e, nodeID) => {
@@ -163,7 +149,6 @@ export function findOrCreateStore(key) {
     //Puts everything together as the svelvet store and use the key so that it can be used.
     const svelvetStore = {
         ...coreSvelvetStore,
-        onTouchMove,
         onMouseMove,
         onNodeClick,
         derivedEdges
